pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'varunv25/myapp:latest'
        KUBECONFIG = 'C:\\Users\\Varun\\.kube\\config'
        MINIKUBE_HOME = 'C:\\Users\\Varun\\.minikube'
    }

    stages {
        stage('Debug') {
            steps {
                echo "KUBECONFIG path: ${KUBECONFIG}"
                echo "MINIKUBE_HOME path: ${MINIKUBE_HOME}"
            }
        }

        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], 
                    userRemoteConfigs: [[url: 'https://github.com/varunkumarv1997/first_jenkin_pipeline_example.git']]])
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    echo "Pushing Docker image to Docker Hub using credentials..."
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        bat """
                            echo %DOCKER_PASS% | docker login -u %DOCKER_USER% --password-stdin
                            docker push ${DOCKER_IMAGE}
                        """
                    }
                }
            }
        }

        stage('Deploy to Minikube') {
            steps {
                script {
                    withEnv([
                        "DOCKER_HOST=tcp://192.168.99.100:2376", 
                        "DOCKER_CERT_PATH=${MINIKUBE_HOME}\\.minikube\\certs", 
                        "DOCKER_TLS_VERIFY=1"
                    ]) {
                        bat "kubectl --kubeconfig=${KUBECONFIG} apply -f kubeconfig.yaml"
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
        }
        success {
            echo ' Build, push, and deployment completed successfully.'
        }
        failure {
            echo ' Build, push, or deployment failed.'
        }
    }
}
